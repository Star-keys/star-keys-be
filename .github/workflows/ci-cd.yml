name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '21'
  AWS_REGION: ap-northeast-2

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: build/reports/tests/test/

  build:
    name: Build Application
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: build/libs/*.jar

  deploy:
    name: Deploy to AWS
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: build/libs/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Ansible and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3 botocore
          ansible-galaxy collection install amazon.aws community.general

      # SSH 키 설정 개선
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/private_key.pem
          chmod 600 ~/.ssh/private_key.pem
          # SSH 에이전트 시작 및 키 추가
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/private_key.pem

      # EC2 IP 먼저 가져오기
      - name: Get EC2 instance IP
        id: ec2_ip
        run: |
          EC2_IP=$(aws ec2 describe-instances \
            --region ${{ env.AWS_REGION }} \
            --filters \
              "Name=tag:ManagedBy,Values=Terraform" \
              "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "ip=$EC2_IP" >> $GITHUB_OUTPUT
          echo "EC2 Instance IP: $EC2_IP"

      # SSH 연결 테스트
      - name: Test SSH connection
        run: |
          echo "Testing SSH connection to ${{ steps.ec2_ip.outputs.ip }}..."
          for i in {1..10}; do
            if ssh -i ~/.ssh/private_key.pem \
                   -o StrictHostKeyChecking=no \
                   -o UserKnownHostsFile=/dev/null \
                   -o ConnectTimeout=10 \
                   ec2-user@${{ steps.ec2_ip.outputs.ip }} "echo 'SSH OK'"; then
              echo "✅ SSH connection successful!"
              exit 0
            fi
            echo "⏳ Attempt $i/10 failed, waiting 10 seconds..."
            sleep 10
          done
          echo "❌ SSH connection failed after 10 attempts"
          exit 1

      # 간단한 인벤토리 생성 (동적 인벤토리 대신)
      - name: Create static inventory
        run: |
          cat > inventory.ini <<EOF
          [webservers]
          ${{ steps.ec2_ip.outputs.ip }}

          [webservers:vars]
          ansible_user=ec2-user
          ansible_ssh_private_key_file=~/.ssh/private_key.pem
          ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
          ansible_python_interpreter=/usr/bin/python3
          EOF
          echo "Inventory file:"
          cat inventory.ini

      - name: Test Ansible connectivity
        run: |
          ansible all -i inventory.ini -m ping -vv

      - name: Run Ansible playbook
        run: |
          JAR_FILE=$(ls build/libs/*.jar)
          echo "Deploying JAR: $JAR_FILE"

          ansible-playbook \
            -i inventory.ini \
            ansible/playbooks/deploy.yml \
            -e "jar_file=$JAR_FILE" \
            -vv

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/private_key.pem
          rm -f inventory.ini